In this problem, a tree is an undirected graph that is connected and has no cycles.

You are given a graph that started as a tree with n nodes labeled from 1 to n, with one additional edge added. The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed. The graph is represented as an array edges of length n where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the graph.

Return an edge that can be removed so that the resulting graph is a tree of n nodes. If there are multiple answers, return the answer that occurs last in the input.

//cpp my solution

class Solution {
public:
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        vector<int>parent(edges.size()+1,0);
        vector<int>result;
        for(auto e : edges){
            int n1 = e[0], n2 = e[1];
            while(parent[n1]) n1 = parent[n1];
            while(parent[n2]) n2 = parent[n2];
            if(n1==n2) result = e;
            else parent[n1]=n2;
        }
        return result;
    }
};
