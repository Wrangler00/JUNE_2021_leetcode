Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.

 

Example 1:


Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
Output: [3,9,20,null,null,15,7]
Example 2:

Input: preorder = [-1], inorder = [-1]
Output: [-1]
 

Constraints:

1 <= preorder.length <= 3000
inorder.length == preorder.length
-3000 <= preorder[i], inorder[i] <= 3000
preorder and inorder consist of unique values.
Each value of inorder also appears in preorder.
preorder is guaranteed to be the preorder traversal of the tree.
inorder is guaranteed to be the inorder traversal of the tree.

//cpp not my solution

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

// 1) Pick an element from Preorder. Increment a Preorder Index Variable (preIndex in below code) to pick the next element in the next recursive call. 
// 2) Create a new tree node tNode with the data as the picked element. 
// 3) Find the picked elementâ€™s index in Inorder. Let the index be inIndex. 
// 4) Call buildTree for elements before inIndex and make the built tree as a left subtree of tNode. 
// 5) Call buildTree for elements after inIndex and make the built tree as a right subtree of tNode. 
// 6) return tNode.
class Solution {
    unordered_map<int,int> mp;
    vector<int> pre;
    int ind=0;
public:
    TreeNode* build(int instart,int inend){
        if(instart>inend)  return NULL;
        
        TreeNode* node = new TreeNode(pre[ind++]);
        
        if(instart == inend)    return node;
        
        int i = mp[node->val];
        
        node->left = build(instart,i-1);
        node->right = build(i+1,inend);
        
        return node;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& in) {
        pre = preorder;
        
        for(int i=0;i<in.size();i++)    mp[in[i]] = i;
        
        return build(0,(int)in.size()-1);
    }
};
