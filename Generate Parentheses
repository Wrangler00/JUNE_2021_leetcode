Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

 

Example 1:

Input: n = 3
Output: ["((()))","(()())","(())()","()(())","()()()"]
Example 2:

Input: n = 1
Output: ["()"]
 

Constraints:

1 <= n <= 8

//cpp my solution
//using nect permutation

//solution 1
class Solution {
public:
    bool isValid(string s){
        int judge=0;
        for(auto &ch:s){
            if(ch=='(')
                ++judge;
            else if(judge<=0)
                return false;
            else --judge;
        }
        
        return !judge;
    }
    vector<string> generateParenthesis(int n) {
        vector<string> ans;
        string s="";
        
        for(int i=0;i<2*n;i++){
            if(i<n)s+="(";
            else s+=")";
        }
        
        do{
            if(isValid(s))
                ans.push_back(s);
        }while(next_permutation(s.begin(),s.end()));
        
        return ans;
    }
};


//solution 2
//using stack and next permutation
//bit slower
class Solution {
public:
    bool isValid(string s){
        stack<char> st;
        
        for(auto &ch:s){
            if(ch=='(')
                st.push(ch);
            else if(st.empty())
                return false;
            else st.pop();
        }
        
        return st.empty();
    }
    vector<string> generateParenthesis(int n) {
        vector<string> ans;
        string s="";
        
        for(int i=0;i<2*n;i++){
            if(i<n)s+="(";
            else s+=")";
        }
        
        do{
            if(isValid(s))
                ans.push_back(s);
        }while(next_permutation(s.begin(),s.end()));
        
        return ans;
    }
};

//using bitsets and bit masking

typedef unsigned long ul;
class Solution {
    vector<string> ans;
    int lim;
public:
    void isValid(ul n){
        // A & (1 << j);
        string s="";
        int j=lim,judge=0;
        
        while(j--){
            if(n&(1<<j)){
                ++judge;
                s+='(';
            }else if(judge<=0)
                return;
            else{
                --judge;
                s+=')';
            }
        }
        
        if(!judge)  ans.push_back(s);
        return;
    }
    vector<string> generateParenthesis(int n) {
        lim=2*n;
        bitset<16> b1(string(n,'1'));
        bitset<16> b2(string(n,'1')+string(n,'0'));
        
        ul a1 = b1.to_ulong();
        ul a2 = b2.to_ulong();
        
        while(a1<=a2){
            isValid(a1);
            ++a1;
        }
        
        // cout<<(b2.to_ulong());
        return ans;
    }
};

//my solution using pure bit wise operations
//ans bitmasking
