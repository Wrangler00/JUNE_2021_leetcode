Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

 

Example 1:

Input: n = 3
Output: ["((()))","(()())","(())()","()(())","()()()"]
Example 2:

Input: n = 1
Output: ["()"]
 

Constraints:

1 <= n <= 8

//cpp my solution
//using nect permutation


class Solution {
public:
    bool isValid(string s){
        stack<char> st;
        
        for(auto &ch:s){
            if(ch=='(')
                st.push(ch);
            else if(st.empty())
                return false;
            else st.pop();
        }
        
        return st.empty();
    }
    vector<string> generateParenthesis(int n) {
        vector<string> ans;
        string s="";
        
        for(int i=0;i<2*n;i++){
            if(i<n)s+="(";
            else s+=")";
        }
        
        do{
            if(isValid(s))
                ans.push_back(s);
        }while(next_permutation(s.begin(),s.end()));
        
        return ans;
    }
};
