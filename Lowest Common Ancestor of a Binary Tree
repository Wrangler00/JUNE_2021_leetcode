Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

 

Example 1:


Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.
Example 2:


Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.
Example 3:

Input: root = [1,2], p = 1, q = 2
Output: 1
 

Constraints:

The number of nodes in the tree is in the range [2, 105].
-109 <= Node.val <= 109
All Node.val are unique.
p != q
p and q will exist in the tree.

//cpp my postorder
//dfs solution


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    TreeNode* ans=NULL;
    int a,b;
public:
    int postorder(TreeNode* node){
        if(!node || ans!=NULL)   return INT_MIN;
        
        int l = postorder(node->left);
        int r = postorder(node->right);
        
        if(l==INT_MIN && r==INT_MIN){
            if(node->val == a)  return a;
            if(node->val == b)  return b;
            return INT_MIN;
        }else if(l==INT_MIN){
            if(node->val == a || node->val == b){
                ans = node;
                return INT_MIN;
            }
            return r;
        }else if(r==INT_MIN){
            if(node->val == a || node->val == b){
                ans = node;
                return INT_MIN;
            }
            return l;
        }
        
        ans=node;
        return INT_MIN;
    }
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        a = p->val;
        b = q->val;
        postorder(root);
        return ans;
    }
};
