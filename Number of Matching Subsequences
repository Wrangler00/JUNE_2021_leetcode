Given a string s and an array of strings words, return the number of words[i] that is a subsequence of s.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
 

Example 1:

Input: s = "abcde", words = ["a","bb","acd","ace"]
Output: 3
Explanation: There are three strings in words that are a subsequence of s: "a", "acd", "ace".
Example 2:

Input: s = "dsahjpjauf", words = ["ahjpjau","ja","ahbwzgqnuk","tnmlanowax"]
Output: 2


//cpp my solution
//using hasmap and binary search

class Solution {
    string src;
    vector<vector<int>> mp;
    unordered_map<string,bool> MP;
public:
    bool isWord(string s){
        if(s.length()>src.length())
            return false;
        
        int j=-1;
            
        for(int i=0;i<s.length();i++){
            vector<int> dict = mp[s[i]-'a'];
            
            if(dict.empty())
                return false;
            
            auto it = upper_bound(dict.begin(),dict.end(),j);
            if(it==dict.end())
                return false;
            j=*it;
        }
        
        return true;
    }
    int numMatchingSubseq(string s, vector<string>& words) {
        mp = vector<vector<int>>(26,vector<int>());
        src=s;
        int ans=0;
        
        for(int i=0;i<s.length();i++){
            mp[s[i]-'a'].push_back(i);
        }
        
        for(auto &w:words){
            if(MP.find(w)!=MP.end())
                ++ans;
            else if(isWord(w)){
                ++ans;
                MP[w]=true;
            }
        }
        
        return ans;
    }
};

//solution 2
//same approach but very much faster solution


class Solution {
    string src;
    vector<vector<int>> mp;
    unordered_map<string,bool> MP;
public:
    bool isWord(string s){
        if(s.length()>src.length())
            return false;
        
        int j=-1;
            
        for(int i=0;i<s.length();i++){
            char ch = s[i];
            if(mp[ch-'a'].empty())  return false;

            auto it = upper_bound(mp[ch-'a'].begin(),mp[ch-'a'].end(),j);
            if(it==mp[ch-'a'].end())    return false;
            j=*it;
        }
        
        return true;
    }
    int numMatchingSubseq(string s, vector<string>& words) {
        mp = vector<vector<int>>(26);
        src=s;
        int ans=0;
        
        for(int i=0;i<s.length();i++)   mp[s[i]-'a'].push_back(i);
        
        for(const auto &w:words){
            if(MP.find(w)!=MP.end()){
                if(MP[w])   ++ans;
            }else if(isWord(w)){
                ++ans;
                MP[w]=true;
            }else{
                MP[w]=false;
            }
        }
        
        return ans;
    }
};
