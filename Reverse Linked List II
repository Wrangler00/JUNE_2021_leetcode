Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.

 

Example 1:


Input: head = [1,2,3,4,5], left = 2, right = 4
Output: [1,4,3,2,5]
Example 2:

Input: head = [5], left = 1, right = 1
Output: [5]
 

Constraints:

The number of nodes in the list is n.
1 <= n <= 500
-500 <= Node.val <= 500
1 <= left <= right <= n
 

Follow up: Could you do it in one pass?


//cpp my solution
//reverse a linked list
//from left index to right index

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        if(left == right)   return head;
        stack<ListNode*> data;
        
        ListNode* p=NULL;
        ListNode* node = head;
        
        for(int i=1;i<=right;i++){
            if(i==left-1)   p = node;    
            else if(i>=left)    data.push(node);
            node = node->next;
        }
        
        node = data.top();
        data.pop();
        
        if(p!=NULL) p->next=node;
        if(left==1) head=node;
        
        ListNode* tail = node->next;
        
        while(!data.empty()){
            ListNode* tmp = data.top();
            data.pop();
            node->next = tmp;
            node = tmp;
        }
        
        node->next = tail;
        
        return head;
    }
};
