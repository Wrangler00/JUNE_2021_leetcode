Given a list of unique words, return all the pairs of the distinct indices (i, j) in the given list, so that the concatenation of the two words words[i] + words[j] is a palindrome.

 

Example 1:

Input: words = ["abcd","dcba","lls","s","sssll"]
Output: [[0,1],[1,0],[3,2],[2,4]]
Explanation: The palindromes are ["dcbaabcd","abcddcba","slls","llssssll"]
Example 2:

Input: words = ["bat","tab","cat"]
Output: [[0,1],[1,0]]
Explanation: The palindromes are ["battab","tabbat"]
Example 3:

Input: words = ["a",""]
Output: [[0,1],[1,0]]
 

Constraints:

1 <= words.length <= 5000
0 <= words[i].length <= 300
words[i] consists of lower-case English letters.

//cpp solution
//took help from discussion and blogs

//solution
//WRONG ANSWER

bool isPalindrome(const string& str,int i,int j){
    while (i < j){
        if (str[i] != str[j])   return false;
        i++,j--;
    }
    return true;
}
class TrieNode {
    public:
    vector<TrieNode*> child;
    vector<int> pos;
    int isWord;
    TrieNode(){
        child = vector<TrieNode*>(26);
        pos = vector<int>();
        isWord=-1;
    }
};

class Trie{
    private:
        TrieNode* root;
    public:
        Trie(){
            root = new TrieNode();
        }
    
        void insert(string s,int ind){
            TrieNode* node = root;
            
            for(int i=s.length()-1;i>=0;i--){
                char ch = s[i];
                
                if(isPalindrome(s,0,i))
                    node->pos.push_back(ind);
                
                if(!node->child[ch-'a'])
                    node->child[ch-'a'] = new TrieNode();
                
                node = node->child[ch-'a'];
            }
            node->pos.push_back(ind);
            node->isWord = ind;
        }
    
        void search(string &s,int &ind,vector<vector<int>> &ans){
            TrieNode* node = root;
            
            for(int i=0;i<s.length();i++){
                char ch = s[i];
                if(!node)    return;
                
                if(node->isWord!=-1 && ind!=node->isWord && isPalindrome(s,i,s.length()-1)){
                    ans.push_back({ind,node->isWord});
                }
                
                node = node->child[ch-'a'];
            }
            
            if(node && !node->pos.empty()){
                for(int &j:node->pos){
                    if(ind!=j)
                        ans.push_back({ind,j});
                }    
            }
        }
};


class Solution {
    Trie* t = new Trie();
public:
    vector<vector<int>> palindromePairs(vector<string>& w) {
        vector<vector<int>> ans;
        int n = w.size();
        
        for(int i=0;i<n;i++)
            t->insert(w[i],i);
        
        for(int i=0;i<n;i++){
            t->search(w[i],i,ans);
        }
        
        return ans;
    }
};


//solution
//WRONG ANSWER

bool isPalindrome(const string& str){
    if (str.empty())    return false;

    int i = 0,j = str.length() - 1;

    while (i < j){
        if (str[i] != str[j])   return false;
        i++,j--;
    }

    return true;
}
class TrieNode {
    public:
    vector<TrieNode*> child;
    int isWord;
    TrieNode(){
        child = vector<TrieNode*>(26);
        isWord=-1;
    }
};

class Trie{
    private:
        TrieNode* root;
        bool mp[5001][5001] = {0};
    public:
        Trie(){
            root = new TrieNode();
            for(int i=0;i<5001;i++){
                for(int j=0;j<5001;j++)
                    mp[i][j]=0;
            }
        }
        void insert(string s,int ind){
            TrieNode* node = root;
            
            for(char &ch:s){
                if(!node->child[ch-'a']){
                    node->child[ch-'a'] = new TrieNode();
                }
                node = node->child[ch-'a'];
            }
            node->isWord = ind;
        }
        bool search(string s){
            TrieNode* node = root;
            
            for(char &ch:s){
                if(!node->child[ch-'a'])
                    return false;
                node = node->child[ch-'a'];
            }
            
            return node->isWord != -1;
        }
    
        void checkPal(string &s1, string &s2,int i1,int i2,vector<vector<int>> &ans){
            if(i1<0 || i2<0)    return;
            if(!mp[i1][i2] && isPalindrome(s1+s2)){
                ans.push_back({i1,i2});
                mp[i1][i2]=true;
            }

            if(!mp[i2][i1] && isPalindrome(s2+s1)){
                ans.push_back({i2,i1});
                mp[i2][i1]=true;
            }
        }
        void potentialPal(string &s,int &ind,vector<vector<int>> &ans){
            int i;
            TrieNode* node = root;
            string make = "";
            
            if(root->isWord!=-1 && isPalindrome(s)){
                ans.push_back({ind,root->isWord});
                ans.push_back({root->isWord,ind});
            }
            
            for(i=s.length()-1;i>=0;i--){
                char ch = s[i];
                
                if(!node->child[ch-'a'])    break;
                
                make+=ch;
                node = node->child[ch-'a'];
                
                checkPal(s, make,ind,node->isWord,ans);
            }
            
            if(i<0) checkPal(s,make,ind,node->isWord,ans);
            
            node=root;
            make="";
            i=0;
            for(i=0;i<s.length();i++){
                char ch = s[i];
                if(!node->child[ch-'a'])    break;
                
                make+=ch;
                node = node->child[ch-'a'];
                
                checkPal(make, s,node->isWord,ind,ans);
            }
            
            if(i==s.length()) checkPal(s,make,ind,node->isWord,ans);
        }
};


class Solution {
    Trie* t = new Trie();
public:
    static bool comp(const pair<string,int> &s1,const pair<string,int> &s2){
        return s1.first.length()<s2.first.length();
    }
    vector<vector<int>> palindromePairs(vector<string>& w) {
        vector<vector<int>> ans;
        int n = w.size();
        vector<pair<string,int>> p(n);
        
        for(int i=0;i<n;i++)    p[i] = {w[i],i};
        
        sort(p.begin(),p.end(),comp);
        
        for(int i=0;i<n;i++){
            t->potentialPal(p[i].first,p[i].second,ans);
            t->insert(p[i].first,p[i].second);
        }
        
        return ans;
    }
};
