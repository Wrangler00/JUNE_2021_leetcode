Given an integer array nums and two integers left and right, return the number of contiguous non-empty subarrays such that the value of the maximum array element in that subarray is in the range [left, right].

The test cases are generated so that the answer will fit in a 32-bit integer.

 

Example 1:

Input: nums = [2,1,4,3], left = 2, right = 3
Output: 3
Explanation: There are three subarrays that meet the requirements: [2], [2, 1], [3].
Example 2:

Input: nums = [2,9,2,5,6], left = 2, right = 8
Output: 7
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 109
0 <= left <= right <= 109

//cpp my solution
//accepted but little slow

// #define tot(n) ((n*(n+1))/2)
class Solution {
    vector<int> arr;
    int l,r;
public:
    inline int form(int n){
        return ((long)n*(n+1))/2;
    }
    
    //[2,1,4,3]
    // 0 1 0 3
    int calc(int start,int end){
        if(start>end)   return 0;
        
        int diff=0;
        int minarr=0;
        
        for(int i=start;i<=end;i++){
            if(arr[i]>=l && arr[i]<=r){
                diff+=form(minarr);
                minarr=0;
            }else{
                minarr++;
            }
        }
        if(minarr)  diff+=form(minarr);
        
        // cout<<start<<" "<<end<<" "<<diff<<" "<<form(end-start+1)<<endl;
        return form(end-start+1)-diff;
    }
    
    int numSubarrayBoundedMax(vector<int>& nums, int left, int right) {
        int ans=0;
        int sz = nums.size();
        
        arr=nums;
        l=left,r=right;
        
        int start=0,end=0;
        for(int i=0;i<sz;i++){
            if(nums[i]>r){
                ans+=calc(start,end-1);
                start = i+1;
            }
            end++;
        }
        
        if(start<=end)
            ans+=calc(start,end-1);
        
        return ans;
    }
};


//solution 2 
//O(n) one pass
//little fast than solution 1

class Solution {
public:
    inline int form(int n){
        return n<2?n:((long)n*(n+1))/2;
    }
    
    int numSubarrayBoundedMax(vector<int>& nums, int l, int r) {
        int diff=0,minarr=0,i,start=0,ans=0;
        
        for(i=0;i<nums.size();i++){
            if(nums[i]>r){
                ans+= form(i-start)-(diff+=form(minarr));
                start = i+1;
                diff=minarr=0;
            }else if(nums[i]>=l && nums[i]<=r){
                diff+=form(minarr);
                minarr=0;
            }else{
                minarr++;
            }
        }
        
        if(start<=i)    ans+= form(i-start)-(diff+=form(minarr));
        
        return ans;
    }
};
