You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.

The area of an island is the number of cells with a value 1 in the island.

Return the maximum area of an island in grid. If there is no island, return 0.

 

Example 1:


Input: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]
Output: 6
Explanation: The answer is not 11, because the island must be connected 4-directionally.
Example 2:

Input: grid = [[0,0,0,0,0,0,0,0]]
Output: 0


//cpp my dfs solution

class Solution {
    int m,n,ans;
public:
    int dfs(vector<vector<int>>& g,int i,int j){
        if(i<0 || i>=m || j<0 || j>=n || !g[i][j])  return 0;
        
        g[i][j]=0;
        
        return 1 + dfs(g,i+1,j)+dfs(g,i-1,j)+dfs(g,i,j+1)+dfs(g,i,j-1);
    }
    
    int maxAreaOfIsland(vector<vector<int>>& g) {
        int ans=0;
        m=g.size(),n=g[0].size();
        
        for(int i=0;i<m;i++){    
            for(int j=0;j<n;j++){
                if(g[i][j])  
                    ans = max(ans,dfs(g,i,j));
            }
        }
        
        return ans;
    }
};
