Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.

An interleaving of two strings s and t is a configuration where they are divided into non-empty substrings such that:

s = s1 + s2 + ... + sn
t = t1 + t2 + ... + tm
|n - m| <= 1
The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...
Note: a + b is the concatenation of strings a and b.

 

Example 1:


Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac"
Output: true
Example 2:

Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbbaccc"
Output: false
Example 3:

Input: s1 = "", s2 = "", s3 = ""
Output: true
 

Constraints:

0 <= s1.length, s2.length <= 100
0 <= s3.length <= 200
s1, s2, and s3 consist of lowercase English letters.
 

Follow up: Could you solve it using only O(s2.length) additional memory space?

//cpp my dfs solution

class Solution {
    string s1, s2, s3;
    bool ans=false;
    vector<vector<int>> s1dp;
    vector<vector<int>> s2dp;
public:
    int dfs(int i,int j,int k){
        if(ans) return 1;
        
        if(k>=s3.length() && i>=s1.length() && j>=s2.length())  
            return ans=1;
        else if(k>=s3.length() || (i>=s1.length() && j>=s2.length()))   
            return -1;
        
        if(i>=s1.length()){
            if(s2[j]==s3[k] && s2dp[j][k]==0)   
                s2dp[j][k] = dfs(i,j+1,k+1);
            
            return s2dp[j][k]==1?1:-1;
        }else if(j>=s2.length()){
            if(s1[i]==s3[k] && s1dp[i][k]==0)   
                s1dp[i][k] = dfs(i+1,j,k+1);
            
            return s1dp[i][k]==1?1:-1;
        }else{
            if(s1[i]==s3[k] && s1dp[i][k]==0)   
                s1dp[i][k] = dfs(i+1,j,k+1);
            
            if(s1dp[i][k]==1)   return 1;
            
            if(s2[j]==s3[k] && s2dp[j][k]==0)   
                s2dp[j][k] = dfs(i,j+1,k+1);
            
            if(s2dp[j][k]==1)   return 1;
        }
        return -1;
    }
    bool isInterleave(string _s1, string _s2, string _s3) {
        if(s1.length()+s2.length()!=s3.length())    return ans;
        
        s1=_s1,s2=_s2,s3=_s3;
        
        s1dp = vector<vector<int>>(s1.length(),vector<int>(s3.length(),0));
        s2dp = vector<vector<int>>(s2.length(),vector<int>(s3.length(),0));
        
        dfs(0,0,0);
        return ans;
    }
};
